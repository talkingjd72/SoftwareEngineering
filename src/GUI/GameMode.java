/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GameMode.java
 *
 * Created on Mar 13, 2011, 10:09:48 PM
 */
package GUI;

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Line2D;
import java.util.Scanner;

import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

/**
 *
 * @author talkingjd72
 */
public class GameMode extends javax.swing.JFrame implements MouseListener, MouseMotionListener {

    /** Creates new form GameMode */
    public GameMode() {
        //initComponents();
        initializeComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 660, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 525, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initializeComponents() {


        //set title
        this.setTitle("Game Mode");
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        //Set size of window
        Dimension size = new Dimension(800, 800);
        setPreferredSize(size);

        //Create grid of 8x8
        GridLayout grid = new GridLayout(8, 8);
        //Set the frame's layout
        //this.setLayout(grid)

        //Create panel that is the board
        chessBoard = new JPanel(grid);
        
        //Fill chess board squares
        for (int i = 0; i < 8; ++i) {

            for (int y = 0; y < 8; ++y) {
                //Holds color of the board and the JLabel that represents the piece
                JPanel box = new JPanel(new GridLayout(1, 1));
                if ((i + y) % 2 == 0) {
                    box.setBackground(Color.black);
                } else {
                    box.setBackground(Color.white);
                }
                //JLabel labes = new JLabel(new ImageIcon(root + black + normal + pawn), JLabel.CENTER);
                //JLabel labes = new JLabel("1");
                //Only add chess pieces where they should begin
                if (i == 0 || i == 1 || i == 6 ||i == 7) {
                    ImageIcon image = new ImageIcon();
                    //Add Top board pawns
                    if (i == 1) {
                        image = new ImageIcon(root + black + normal + pawn);
                    }
                    //Add bottom board pawns
                    if(i == 6){
                        image = new ImageIcon(root + white + normal + pawn);
                    }

                    //Add top board rook, knight, bishop, queen, king
                    if(i == 0){
                        //Rook
                        if(y == 0 || y == 7){
                            image = new ImageIcon(root + black + normal + rook);
                        }
                        //Knight
                        if(y == 1 || y == 6){
                            image = new ImageIcon(root + black + normal + knight);
                        }
                        //Bishop
                        if(y == 2 || y == 5){
                            image = new ImageIcon(root + black + normal + bishop);
                        }
                        //King
                        if(y == 4){
                            image = new ImageIcon(root + black + normal + king);
                        }
                        //Queen
                        if(y == 3){
                            image = new ImageIcon(root + black + normal + queen);
                        }
                    }
                    //Add bottom board rook, knight, bishop, queen, king
                    if(i == 7){
                        //Rook
                        if(y == 0 || y == 7){
                            image = new ImageIcon(root + white + normal + rook);
                        }
                        //Knight
                        if(y == 1 || y == 6){
                            image = new ImageIcon(root + white + normal + knight);
                        }
                        //Bishop
                        if(y == 2 || y == 5){
                            image = new ImageIcon(root + white + normal + bishop);
                        }
                        //King
                        if(y == 4){
                            image = new ImageIcon(root + white + normal + king);
                        }
                        //Queen
                        if(y == 3){
                            image = new ImageIcon(root + white + normal + queen);
                        }
                    }
                    //A JLabel with the image of the piece
                    JLabel piece = new JLabel(image, JLabel.CENTER);

                    //labes.setBackground(Color.yellow);
                    //labes.setOpaque(true);
                    box.add(piece);
                }
                //Border bord = new EmptyBorder(20,20,20,20);
                //JPanel border = new JPanel()
                //box.setBorder(bord);
                chessBoard.add(box, BorderLayout.CENTER);
            }

        }

        //Create a panel with grid layout for the buttons
        JPanel buttons = new JPanel(new GridLayout(4, 1, 5, 100));

        //Create buttons
        draw = new JButton("Draw?");
        forfeit = new JButton("Forfeit?");
        forfeit.setBackground(Color.red);
        forfeit.setOpaque(true);

        //add action listeners to buttons
        draw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawActionPerformed(evt);
            }
        });

        forfeit.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(ActionEvent evt) {
                forfeitActionPerformed(evt);
            }
        });

        //Add mouse listeners to pane
        this.getContentPane().addMouseListener(this);
        this.getContentPane().addMouseMotionListener(this);

        

        //Add buttons to grid layout
        buttons.add(new JLabel(""));
        buttons.add(draw);
        buttons.add(forfeit);
        buttons.add(new JLabel(""));
        //pane.add(connect, BorderLayout.WEST);
        add(buttons, BorderLayout.WEST);
        add(chessBoard, BorderLayout.CENTER);
        

        //pack to the screen
        pack();

        //Dimension dim = buttons.getSize();
        //offSet = dim.getWidth();
        offSetX = buttons.getWidth();
    }

    private void drawActionPerformed(java.awt.event.ActionEvent evt) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AcceptScreen("Do you want to ask the other player for a draw?").setVisible(true);
            }
        });
        
    }

    private void forfeitActionPerformed(java.awt.event.ActionEvent evt) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AcceptScreen("Do you want to forfeit?").setVisible(true);
            }
        });

    }

    public void mousePressed(MouseEvent e){
        chessPiece = null;
        Component c =  chessBoard.findComponentAt(e.getX() - offSetX, e.getY());

        if (c instanceof JPanel){
            System.out.println("JPanel: " + offSetX);
           return;
        }

        Point parentLocation = c.getParent().getLocation();
        xAdjustment = 0; yAdjustment = 0;

        //TODO ORIGINAL CODE DON'T ERASE
        xAdjustment = parentLocation.x - e.getX();
        yAdjustment = parentLocation.y - e.getY();
        chessPiece = (JLabel)c;
        chessPiece.setLocation(e.getX() - offSetX + xAdjustment, e.getY() + yAdjustment);
        chessPiece.setSize(chessPiece.getWidth(), chessPiece.getHeight());

        //Added
        //originalX = e.getX() - offSetX;
        //originalY = e.getY();
        //
        //this.getContentPane().add(chessPiece);
        //add(chessPiece);
        System.out.println("xAdjustment: " + xAdjustment + " yAdjustment: " + yAdjustment + c.getParent());
    }

    //Move the chess piece around

    public void mouseDragged(MouseEvent me) {
        if (chessPiece == null) return;

        //Added
        //xAdjustment = originalX - me.getX() - offSetX;
        //yAdjustment = originalY - me.getY();
        //
        
        chessPiece.setLocation(me.getX() - offSetX + xAdjustment, me.getY() + yAdjustment);
     }

  //Drop the chess piece back onto the chess board

    public void mouseReleased(MouseEvent e) {
        if(chessPiece == null) return;

        chessPiece.setVisible(false);
        Component c =  chessBoard.findComponentAt(e.getX() - offSetX, e.getY());

        if (c instanceof JLabel){
            //Removed this to not cover up pieces
            //We can use this one a piece captures a piece

            //Container parent = c.getParent();
            //parent.remove(0);
            //parent.add( chessPiece );
        }
        else {
            Container parent = (Container)c;
            parent.add( chessPiece );
        }

        chessPiece.setVisible(true);
    }

    public void mouseClicked(MouseEvent e) {

    }
    public void mouseMoved(MouseEvent e) {
   }
    public void mouseEntered(MouseEvent e){

    }
    public void mouseExited(MouseEvent e) {

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GameMode().setVisible(true);
            }
        });
    }
    
    //Buttons
    private JButton draw;
    private JButton forfeit;
    //variables for path to chess pieces
    private final String root = "/Users/talkingjd72/Desktop/ChessPieces/";
    private final String black = "blackPieces/";
    private final String white = "whitePieces/";
    private final String normal = "normal/";
    private final String inverted = "inverted/";
    private final String bishop = "bishop.jpg";
    private final String king = "king.jpg";
    private final String knight = "knight.jpg";
    private final String pawn = "pawn.jpg";
    private final String queen = "queen.jpg";
    private final String rook = "rook.jpg";
    //Hold cordinats of mouse
    int xAdjustment;
    int yAdjustment;
    int offSetX;
    int originalX;
    int originalY;

    JLabel chessPiece;

    JPanel chessBoard;

    JLayeredPane layeredPane;

    //JPane pane;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
